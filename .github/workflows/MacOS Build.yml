name: MacOS Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rosetta (For x86_64 Support)
        run: |
          sudo softwareupdate --install-rosetta --agree-to-license || echo "Rosetta already installed"

      - name: Install Dependencies
        run: |
          brew update
          brew install cmake ninja pkg-config
          brew install autoconf automake autoconf-archive libtool
          brew install qt6
          brew install gettext m4

      - name: Check Installed Versions
        run: |
          cmake --version
          ninja --version
          python3 --version
          autoconf --version

      - name: Force use system Python
        run: |
          export PYTHON_EXECUTABLE=$(which python3)
          echo "PYTHON_EXECUTABLE=$(which python3)" >> $GITHUB_ENV

      - name: Refresh shell environment
        run: |
          eval "$(/opt/homebrew/bin/brew shellenv)"

      - name: Cache vcpkg and installed libraries
        uses: actions/cache@v3
        with:
          path: |
            ${{ runner.workspace }}/vcpkg
            ${{ runner.workspace }}/vcpkg_installed
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Clone vcpkg (if not cached)
        run: |
          if [ ! -d "${{ runner.workspace }}/vcpkg" ]; then
            git clone https://github.com/microsoft/vcpkg.git "${{ runner.workspace }}/vcpkg"
          fi

      - name: Bootstrap vcpkg
        run: |
          cd "${{ runner.workspace }}/vcpkg"
          ./bootstrap-vcpkg.sh

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ runner.workspace }}/vcpkg'
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Add Homebrew paths
        run: echo "$(brew --prefix)/bin" >> $GITHUB_PATH

      - name: Configure CMake (M1/M2 Support)
        run: |
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_MAKE_PROGRAM=$(which ninja) \
            -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_C_COMPILER=clang

      - name: Build Project
        run: cmake --build build --config Release
